version: "3"
services:
  explorer-model:
    container_name: explorer-model
    restart: always
    volumes:
      - .env:/app/.env:ro
    build: ./ml
    ports:
      - "3003:3003"
    networks:
      - backbone
  explorer-backend:
    container_name: explorer-backend
    restart: always
    build: ./backend
    volumes:
      - .env:/app/.env:ro
    ports:
      - "3001:3001"
    links:
      - mongo
    depends_on: 
      - explorer-authentication
    networks:
      - backbone
  explorer-authentication:
    container_name: explorer-authentication
    restart: always
    build: ./authentication
    volumes:
      - .env:/app/.env:ro
    ports:
      - "3002:3002"
    links:
      - mongo
    networks:
      - backbone
  explorer-frontend:
    container_name: explorer-frontend
    environment:
      - NODE_ENV=production
    build: ./frontend
    restart: always
    links:
     - explorer-authentication
     - explorer-backend
    depends_on: 
      - explorer-backend
      - explorer-authentication
      - dataset-store
      - explorer-model
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docs:/var/www
      - web-root:/var/www/html
      - ./nginx_https.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./dhparam:/etc/ssl/certs
    networks:
      - backbone
  dataset-store:
    container_name: dataset-store
    build: ./Dataset-store
    restart: always
    ports:
      - 3004:3004
    volumes:
      - ./tsData:/app/app/DATA
      - ./rawCSVDATA:/app/app/RAW_CSV_DATA
      - .env:/app/.env:ro
    networks:
      - backbone
    links:
      - mongo
  mongo:
    container_name: mongo
    restart: always
    image: mongo:4
    volumes:
      - ./data:/data/db
    ports:
      - "27017:27017"
    environment:
      - NETWORK_ACCESS=internal
    networks:
      - backbone
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq/
    networks:
      - backbone
  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - explorer-frontend
      # Add --staging to this command and remove --force-renewal if you just want to test it
    command: certonly --webroot --webroot-path=/var/www/html --email explorer@teco.edu --agree-tos --no-eff-email --force-renewal -d edge-ml-beta.dmz.teco.edu

volumes:
  certbot-etc:
  certbot-var:
  web-root:
    driver: local
    driver_opts:
      type: none
      device: /home/ubuntu/dockerVolume/
      o: bind
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: /home/ubuntu/dhparam/
      o: bind
  rabbitmq_data:
  rabbitmq_log:
networks:
  backbone:
    driver: bridge
